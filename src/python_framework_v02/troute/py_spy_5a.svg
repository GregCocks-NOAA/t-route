<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="287.00"> </text><svg id="frames" x="10" width="1180"><g><title>__getattr__ (pandas\core\generic.py:5461) (14 samples, 1.53%)</title><rect x="1.3129%" y="116" width="1.5317%" height="15" fill="rgb(227,0,7)"/><text x="1.5629%" y="126.50"></text></g><g><title>__getitem__ (pandas\core\frame.py:2996) (12 samples, 1.31%)</title><rect x="1.5317%" y="132" width="1.3129%" height="15" fill="rgb(217,0,24)"/><text x="1.7817%" y="142.50"></text></g><g><title>_get_listlike_indexer (pandas\core\indexing.py:1262) (17 samples, 1.86%)</title><rect x="4.2670%" y="164" width="1.8600%" height="15" fill="rgb(221,193,54)"/><text x="4.5170%" y="174.50">_..</text></g><g><title>_getitem_iterable (pandas\core\indexing.py:1053) (31 samples, 3.39%)</title><rect x="3.0635%" y="148" width="3.3917%" height="15" fill="rgb(248,212,6)"/><text x="3.3135%" y="158.50">_ge..</text></g><g><title>take_nd (pandas\core\internals\blocks.py:1385) (26 samples, 2.84%)</title><rect x="6.5646%" y="212" width="2.8446%" height="15" fill="rgb(208,68,35)"/><text x="6.8146%" y="222.50">ta..</text></g><g><title>__getitem__ (pandas\core\indexing.py:895) (64 samples, 7.00%)</title><rect x="2.8446%" y="116" width="7.0022%" height="15" fill="rgb(232,128,0)"/><text x="3.0946%" y="126.50">__getitem..</text></g><g><title>_getitem_axis (pandas\core\indexing.py:1113) (63 samples, 6.89%)</title><rect x="2.9540%" y="132" width="6.8928%" height="15" fill="rgb(207,160,47)"/><text x="3.2040%" y="142.50">_getitem_..</text></g><g><title>_getitem_iterable (pandas\core\indexing.py:1054) (31 samples, 3.39%)</title><rect x="6.4551%" y="148" width="3.3917%" height="15" fill="rgb(228,23,34)"/><text x="6.7051%" y="158.50">_ge..</text></g><g><title>_reindex_with_indexers (pandas\core\generic.py:4874) (31 samples, 3.39%)</title><rect x="6.4551%" y="164" width="3.3917%" height="15" fill="rgb(218,30,26)"/><text x="6.7051%" y="174.50">_re..</text></g><g><title>reindex_indexer (pandas\core\internals\managers.py:1311) (30 samples, 3.28%)</title><rect x="6.5646%" y="180" width="3.2823%" height="15" fill="rgb(220,122,19)"/><text x="6.8146%" y="190.50">rei..</text></g><g><title>&lt;listcomp&gt; (pandas\core\internals\managers.py:1312) (30 samples, 3.28%)</title><rect x="6.5646%" y="196" width="3.2823%" height="15" fill="rgb(250,228,42)"/><text x="6.8146%" y="206.50">&lt;li..</text></g><g><title>segment_merge (nhd_network_augment.py:875) (92 samples, 10.07%)</title><rect x="1.2035%" y="100" width="10.0656%" height="15" fill="rgb(240,193,28)"/><text x="1.4535%" y="110.50">segment_merge (..</text></g><g><title>sum (pandas\core\generic.py:11066) (12 samples, 1.31%)</title><rect x="9.9562%" y="116" width="1.3129%" height="15" fill="rgb(216,20,37)"/><text x="10.2062%" y="126.50"></text></g><g><title>sum (pandas\core\generic.py:10786) (12 samples, 1.31%)</title><rect x="9.9562%" y="132" width="1.3129%" height="15" fill="rgb(206,188,39)"/><text x="10.2062%" y="142.50"></text></g><g><title>_min_count_stat_function (pandas\core\generic.py:10768) (12 samples, 1.31%)</title><rect x="9.9562%" y="148" width="1.3129%" height="15" fill="rgb(217,207,13)"/><text x="10.2062%" y="158.50"></text></g><g><title>_reduce (pandas\core\series.py:4152) (11 samples, 1.20%)</title><rect x="10.0656%" y="164" width="1.2035%" height="15" fill="rgb(231,73,38)"/><text x="10.3156%" y="174.50"></text></g><g><title>segment_merge (nhd_network_augment.py:881) (11 samples, 1.20%)</title><rect x="11.2691%" y="100" width="1.2035%" height="15" fill="rgb(225,20,46)"/><text x="11.5191%" y="110.50"></text></g><g><title>__getitem__ (pandas\core\indexing.py:895) (10 samples, 1.09%)</title><rect x="11.3786%" y="116" width="1.0941%" height="15" fill="rgb(210,31,41)"/><text x="11.6286%" y="126.50"></text></g><g><title>_getitem_axis (pandas\core\indexing.py:1113) (10 samples, 1.09%)</title><rect x="11.3786%" y="132" width="1.0941%" height="15" fill="rgb(221,200,47)"/><text x="11.6286%" y="142.50"></text></g><g><title>merge_all (nhd_network_augment.py:733) (12 samples, 1.31%)</title><rect x="12.9103%" y="116" width="1.3129%" height="15" fill="rgb(226,26,5)"/><text x="13.1603%" y="126.50"></text></g><g><title>merge_all (nhd_network_augment.py:736) (10 samples, 1.09%)</title><rect x="14.2232%" y="116" width="1.0941%" height="15" fill="rgb(249,33,26)"/><text x="14.4732%" y="126.50"></text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (10 samples, 1.09%)</title><rect x="14.2232%" y="132" width="1.0941%" height="15" fill="rgb(235,183,28)"/><text x="14.4732%" y="142.50"></text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (10 samples, 1.09%)</title><rect x="14.2232%" y="148" width="1.0941%" height="15" fill="rgb(221,5,38)"/><text x="14.4732%" y="158.50"></text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (10 samples, 1.09%)</title><rect x="14.2232%" y="164" width="1.0941%" height="15" fill="rgb(247,18,42)"/><text x="14.4732%" y="174.50"></text></g><g><title>segment_merge (nhd_network_augment.py:892) (27 samples, 2.95%)</title><rect x="12.5821%" y="100" width="2.9540%" height="15" fill="rgb(241,131,45)"/><text x="12.8321%" y="110.50">seg..</text></g><g><title>segment_merge (nhd_network_augment.py:895) (19 samples, 2.08%)</title><rect x="15.5361%" y="100" width="2.0788%" height="15" fill="rgb(249,31,29)"/><text x="15.7861%" y="110.50">s..</text></g><g><title>update_network_data (nhd_network_augment.py:781) (17 samples, 1.86%)</title><rect x="15.7549%" y="116" width="1.8600%" height="15" fill="rgb(225,111,53)"/><text x="16.0049%" y="126.50">u..</text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (17 samples, 1.86%)</title><rect x="15.7549%" y="132" width="1.8600%" height="15" fill="rgb(238,160,17)"/><text x="16.0049%" y="142.50">_..</text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (17 samples, 1.86%)</title><rect x="15.7549%" y="148" width="1.8600%" height="15" fill="rgb(214,148,48)"/><text x="16.0049%" y="158.50">_..</text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (17 samples, 1.86%)</title><rect x="15.7549%" y="164" width="1.8600%" height="15" fill="rgb(232,36,49)"/><text x="16.0049%" y="174.50">_..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1787) (13 samples, 1.42%)</title><rect x="16.1926%" y="180" width="1.4223%" height="15" fill="rgb(209,103,24)"/><text x="16.4426%" y="190.50"></text></g><g><title>_get_listlike_indexer (pandas\core\indexing.py:1261) (11 samples, 1.20%)</title><rect x="18.7090%" y="164" width="1.2035%" height="15" fill="rgb(229,88,8)"/><text x="18.9590%" y="174.50"></text></g><g><title>get_indexer_for (pandas\core\indexes\base.py:4960) (11 samples, 1.20%)</title><rect x="18.7090%" y="180" width="1.2035%" height="15" fill="rgb(213,181,19)"/><text x="18.9590%" y="190.50"></text></g><g><title>_getitem_iterable (pandas\core\indexing.py:1053) (22 samples, 2.41%)</title><rect x="18.3807%" y="148" width="2.4070%" height="15" fill="rgb(254,191,54)"/><text x="18.6307%" y="158.50">_g..</text></g><g><title>take_nd (pandas\core\internals\blocks.py:1385) (11 samples, 1.20%)</title><rect x="21.0066%" y="212" width="1.2035%" height="15" fill="rgb(241,83,37)"/><text x="21.2566%" y="222.50"></text></g><g><title>reindex_indexer (pandas\core\internals\managers.py:1311) (13 samples, 1.42%)</title><rect x="21.0066%" y="180" width="1.4223%" height="15" fill="rgb(233,36,39)"/><text x="21.2566%" y="190.50"></text></g><g><title>&lt;listcomp&gt; (pandas\core\internals\managers.py:1312) (13 samples, 1.42%)</title><rect x="21.0066%" y="196" width="1.4223%" height="15" fill="rgb(226,3,54)"/><text x="21.2566%" y="206.50"></text></g><g><title>_reindex_with_indexers (pandas\core\generic.py:4874) (14 samples, 1.53%)</title><rect x="21.0066%" y="164" width="1.5317%" height="15" fill="rgb(245,192,40)"/><text x="21.2566%" y="174.50"></text></g><g><title>__getitem__ (pandas\core\indexing.py:895) (40 samples, 4.38%)</title><rect x="18.2713%" y="116" width="4.3764%" height="15" fill="rgb(238,167,29)"/><text x="18.5213%" y="126.50">__get..</text></g><g><title>_getitem_axis (pandas\core\indexing.py:1113) (39 samples, 4.27%)</title><rect x="18.3807%" y="132" width="4.2670%" height="15" fill="rgb(232,182,51)"/><text x="18.6307%" y="142.50">_geti..</text></g><g><title>_getitem_iterable (pandas\core\indexing.py:1054) (17 samples, 1.86%)</title><rect x="20.7877%" y="148" width="1.8600%" height="15" fill="rgb(231,60,39)"/><text x="21.0377%" y="158.50">_..</text></g><g><title>segment_merge (nhd_network_augment.py:906) (50 samples, 5.47%)</title><rect x="17.6149%" y="100" width="5.4705%" height="15" fill="rgb(208,69,12)"/><text x="17.8649%" y="110.50">segment..</text></g><g><title>merge_parameters (nhd_network_augment.py:543) (11 samples, 1.20%)</title><rect x="26.3676%" y="132" width="1.2035%" height="15" fill="rgb(235,93,37)"/><text x="26.6176%" y="142.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:546) (11 samples, 1.20%)</title><rect x="28.7746%" y="132" width="1.2035%" height="15" fill="rgb(213,116,39)"/><text x="29.0246%" y="142.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:547) (13 samples, 1.42%)</title><rect x="29.9781%" y="132" width="1.4223%" height="15" fill="rgb(222,207,29)"/><text x="30.2281%" y="142.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:552) (10 samples, 1.09%)</title><rect x="32.6039%" y="132" width="1.0941%" height="15" fill="rgb(206,96,30)"/><text x="32.8539%" y="142.50"></text></g><g><title>upstream_merge (nhd_network_augment.py:626) (78 samples, 8.53%)</title><rect x="25.2735%" y="116" width="8.5339%" height="15" fill="rgb(218,138,4)"/><text x="25.5235%" y="126.50">upstream_mer..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1781) (13 samples, 1.42%)</title><rect x="33.9168%" y="180" width="1.4223%" height="15" fill="rgb(250,191,14)"/><text x="34.1668%" y="190.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1813) (14 samples, 1.53%)</title><rect x="37.1991%" y="196" width="1.5317%" height="15" fill="rgb(239,60,40)"/><text x="37.4491%" y="206.50"></text></g><g><title>setitem (pandas\core\internals\managers.py:568) (13 samples, 1.42%)</title><rect x="37.3085%" y="212" width="1.4223%" height="15" fill="rgb(206,27,48)"/><text x="37.5585%" y="222.50"></text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (56 samples, 6.13%)</title><rect x="33.8074%" y="132" width="6.1269%" height="15" fill="rgb(225,35,8)"/><text x="34.0574%" y="142.50">__setite..</text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (56 samples, 6.13%)</title><rect x="33.8074%" y="148" width="6.1269%" height="15" fill="rgb(250,213,24)"/><text x="34.0574%" y="158.50">_setitem..</text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (56 samples, 6.13%)</title><rect x="33.8074%" y="164" width="6.1269%" height="15" fill="rgb(247,123,22)"/><text x="34.0574%" y="174.50">_setitem..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1787) (35 samples, 3.83%)</title><rect x="36.1050%" y="180" width="3.8293%" height="15" fill="rgb(231,138,38)"/><text x="36.3550%" y="190.50">_set..</text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1817) (10 samples, 1.09%)</title><rect x="38.8403%" y="196" width="1.0941%" height="15" fill="rgb(231,145,46)"/><text x="39.0903%" y="206.50"></text></g><g><title>upstream_merge (nhd_network_augment.py:629) (57 samples, 6.24%)</title><rect x="33.8074%" y="116" width="6.2363%" height="15" fill="rgb(251,118,11)"/><text x="34.0574%" y="126.50">upstream..</text></g><g><title>segment_merge (nhd_network_augment.py:931) (145 samples, 15.86%)</title><rect x="25.1641%" y="100" width="15.8643%" height="15" fill="rgb(217,147,25)"/><text x="25.4141%" y="110.50">segment_merge (nhd_netwo..</text></g><g><title>merge_parameters (nhd_network_augment.py:541) (11 samples, 1.20%)</title><rect x="44.5295%" y="132" width="1.2035%" height="15" fill="rgb(247,81,37)"/><text x="44.7795%" y="142.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:542) (22 samples, 2.41%)</title><rect x="45.7330%" y="132" width="2.4070%" height="15" fill="rgb(209,12,38)"/><text x="45.9830%" y="142.50">me..</text></g><g><title>len_weighted_av (nhd_network_augment.py:503) (12 samples, 1.31%)</title><rect x="46.8271%" y="148" width="1.3129%" height="15" fill="rgb(227,1,9)"/><text x="47.0771%" y="158.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:543) (11 samples, 1.20%)</title><rect x="48.1400%" y="132" width="1.2035%" height="15" fill="rgb(248,47,43)"/><text x="48.3900%" y="142.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:544) (18 samples, 1.97%)</title><rect x="49.3435%" y="132" width="1.9694%" height="15" fill="rgb(221,10,30)"/><text x="49.5935%" y="142.50">m..</text></g><g><title>merge_parameters (nhd_network_augment.py:545) (13 samples, 1.42%)</title><rect x="51.3129%" y="132" width="1.4223%" height="15" fill="rgb(210,229,1)"/><text x="51.5629%" y="142.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:546) (15 samples, 1.64%)</title><rect x="52.7352%" y="132" width="1.6411%" height="15" fill="rgb(222,148,37)"/><text x="52.9852%" y="142.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:547) (12 samples, 1.31%)</title><rect x="54.3764%" y="132" width="1.3129%" height="15" fill="rgb(234,67,33)"/><text x="54.6264%" y="142.50"></text></g><g><title>len_weighted_av (nhd_network_augment.py:503) (10 samples, 1.09%)</title><rect x="56.2363%" y="148" width="1.0941%" height="15" fill="rgb(247,98,35)"/><text x="56.4863%" y="158.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:550) (16 samples, 1.75%)</title><rect x="55.6893%" y="132" width="1.7505%" height="15" fill="rgb(247,138,52)"/><text x="55.9393%" y="142.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:551) (16 samples, 1.75%)</title><rect x="57.4398%" y="132" width="1.7505%" height="15" fill="rgb(213,79,30)"/><text x="57.6898%" y="142.50"></text></g><g><title>downstream_merge (nhd_network_augment.py:681) (152 samples, 16.63%)</title><rect x="44.3107%" y="116" width="16.6302%" height="15" fill="rgb(246,177,23)"/><text x="44.5607%" y="126.50">downstream_merge (nhd_netw..</text></g><g><title>merge_parameters (nhd_network_augment.py:552) (16 samples, 1.75%)</title><rect x="59.1904%" y="132" width="1.7505%" height="15" fill="rgb(230,62,27)"/><text x="59.4404%" y="142.50"></text></g><g><title>_align_series (pandas\core\indexing.py:2007) (13 samples, 1.42%)</title><rect x="62.4726%" y="196" width="1.4223%" height="15" fill="rgb(216,154,8)"/><text x="62.7226%" y="206.50"></text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1781) (35 samples, 3.83%)</title><rect x="61.4880%" y="180" width="3.8293%" height="15" fill="rgb(244,35,45)"/><text x="61.7380%" y="190.50">_set..</text></g><g><title>_align_series (pandas\core\indexing.py:2008) (13 samples, 1.42%)</title><rect x="63.8950%" y="196" width="1.4223%" height="15" fill="rgb(251,115,12)"/><text x="64.1450%" y="206.50"></text></g><g><title>equals (pandas\core\indexes\base.py:4470) (11 samples, 1.20%)</title><rect x="64.1138%" y="212" width="1.2035%" height="15" fill="rgb(240,54,50)"/><text x="64.3638%" y="222.50"></text></g><g><title>copy (pandas\core\generic.py:5992) (10 samples, 1.09%)</title><rect x="67.1772%" y="212" width="1.0941%" height="15" fill="rgb(233,84,52)"/><text x="67.4272%" y="222.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1812) (16 samples, 1.75%)</title><rect x="67.1772%" y="196" width="1.7505%" height="15" fill="rgb(207,117,47)"/><text x="67.4272%" y="206.50"></text></g><g><title>apply (pandas\core\internals\managers.py:427) (10 samples, 1.09%)</title><rect x="69.0372%" y="228" width="1.0941%" height="15" fill="rgb(249,43,39)"/><text x="69.2872%" y="238.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1813) (12 samples, 1.31%)</title><rect x="68.9278%" y="196" width="1.3129%" height="15" fill="rgb(209,38,44)"/><text x="69.1778%" y="206.50"></text></g><g><title>setitem (pandas\core\internals\managers.py:568) (11 samples, 1.20%)</title><rect x="69.0372%" y="212" width="1.2035%" height="15" fill="rgb(236,212,23)"/><text x="69.2872%" y="222.50"></text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (93 samples, 10.18%)</title><rect x="61.2691%" y="132" width="10.1751%" height="15" fill="rgb(242,79,21)"/><text x="61.5191%" y="142.50">__setitem__ (pa..</text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (93 samples, 10.18%)</title><rect x="61.2691%" y="148" width="10.1751%" height="15" fill="rgb(211,96,35)"/><text x="61.5191%" y="158.50">_setitem_with_i..</text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (93 samples, 10.18%)</title><rect x="61.2691%" y="164" width="10.1751%" height="15" fill="rgb(253,215,40)"/><text x="61.5191%" y="174.50">_setitem_with_i..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1787) (47 samples, 5.14%)</title><rect x="66.3020%" y="180" width="5.1422%" height="15" fill="rgb(211,81,21)"/><text x="66.5520%" y="190.50">_setit..</text></g><g><title>downstream_merge (nhd_network_augment.py:684) (97 samples, 10.61%)</title><rect x="60.9409%" y="116" width="10.6127%" height="15" fill="rgb(208,190,38)"/><text x="61.1909%" y="126.50">downstream_merg..</text></g><g><title>drop (pandas\core\frame.py:4305) (13 samples, 1.42%)</title><rect x="71.5536%" y="132" width="1.4223%" height="15" fill="rgb(235,213,38)"/><text x="71.8036%" y="142.50"></text></g><g><title>drop (pandas\core\generic.py:4152) (13 samples, 1.42%)</title><rect x="71.5536%" y="148" width="1.4223%" height="15" fill="rgb(237,122,38)"/><text x="71.8036%" y="158.50"></text></g><g><title>_drop_axis (pandas\core\generic.py:4188) (10 samples, 1.09%)</title><rect x="71.8818%" y="164" width="1.0941%" height="15" fill="rgb(244,218,35)"/><text x="72.1318%" y="174.50"></text></g><g><title>wrapper (pandas\util\_decorators.py:312) (10 samples, 1.09%)</title><rect x="71.8818%" y="180" width="1.0941%" height="15" fill="rgb(240,68,47)"/><text x="72.1318%" y="190.50"></text></g><g><title>reindex (pandas\core\frame.py:4173) (10 samples, 1.09%)</title><rect x="71.8818%" y="196" width="1.0941%" height="15" fill="rgb(210,16,53)"/><text x="72.1318%" y="206.50"></text></g><g><title>reindex (pandas\core\generic.py:4808) (10 samples, 1.09%)</title><rect x="71.8818%" y="212" width="1.0941%" height="15" fill="rgb(235,124,12)"/><text x="72.1318%" y="222.50"></text></g><g><title>_reindex_axes (pandas\core\frame.py:4019) (10 samples, 1.09%)</title><rect x="71.8818%" y="228" width="1.0941%" height="15" fill="rgb(224,169,11)"/><text x="72.1318%" y="238.50"></text></g><g><title>downstream_merge (nhd_network_augment.py:687) (15 samples, 1.64%)</title><rect x="71.5536%" y="116" width="1.6411%" height="15" fill="rgb(250,166,2)"/><text x="71.8036%" y="126.50"></text></g><g><title>segment_merge (nhd_network_augment.py:945) (286 samples, 31.29%)</title><rect x="42.0131%" y="100" width="31.2910%" height="15" fill="rgb(242,216,29)"/><text x="42.2631%" y="110.50">segment_merge (nhd_network_augment.py:945)</text></g><g><title>update_network_data (nhd_network_augment.py:778) (21 samples, 2.30%)</title><rect x="73.8512%" y="116" width="2.2976%" height="15" fill="rgb(230,116,27)"/><text x="74.1012%" y="126.50">u..</text></g><g><title>drop (pandas\core\frame.py:4305) (21 samples, 2.30%)</title><rect x="73.8512%" y="132" width="2.2976%" height="15" fill="rgb(228,99,48)"/><text x="74.1012%" y="142.50">d..</text></g><g><title>drop (pandas\core\generic.py:4152) (21 samples, 2.30%)</title><rect x="73.8512%" y="148" width="2.2976%" height="15" fill="rgb(253,11,6)"/><text x="74.1012%" y="158.50">d..</text></g><g><title>_drop_axis (pandas\core\generic.py:4188) (15 samples, 1.64%)</title><rect x="74.5077%" y="164" width="1.6411%" height="15" fill="rgb(247,143,39)"/><text x="74.7577%" y="174.50"></text></g><g><title>wrapper (pandas\util\_decorators.py:312) (15 samples, 1.64%)</title><rect x="74.5077%" y="180" width="1.6411%" height="15" fill="rgb(236,97,10)"/><text x="74.7577%" y="190.50"></text></g><g><title>reindex (pandas\core\frame.py:4173) (14 samples, 1.53%)</title><rect x="74.6171%" y="196" width="1.5317%" height="15" fill="rgb(233,208,19)"/><text x="74.8671%" y="206.50"></text></g><g><title>reindex (pandas\core\generic.py:4808) (13 samples, 1.42%)</title><rect x="74.7265%" y="212" width="1.4223%" height="15" fill="rgb(216,164,2)"/><text x="74.9765%" y="222.50"></text></g><g><title>_reindex_axes (pandas\core\frame.py:4019) (13 samples, 1.42%)</title><rect x="74.7265%" y="228" width="1.4223%" height="15" fill="rgb(220,129,5)"/><text x="74.9765%" y="238.50"></text></g><g><title>_reindex_index (pandas\core\frame.py:4038) (10 samples, 1.09%)</title><rect x="75.0547%" y="244" width="1.0941%" height="15" fill="rgb(242,17,10)"/><text x="75.3047%" y="254.50"></text></g><g><title>_reindex_with_indexers (pandas\core\generic.py:4874) (10 samples, 1.09%)</title><rect x="75.0547%" y="260" width="1.0941%" height="15" fill="rgb(242,107,0)"/><text x="75.3047%" y="270.50"></text></g><g><title>_get_listlike_indexer (pandas\core\indexing.py:1260) (10 samples, 1.09%)</title><rect x="76.1488%" y="180" width="1.0941%" height="15" fill="rgb(251,28,31)"/><text x="76.3988%" y="190.50"></text></g><g><title>_index_as_unique (pandas\core\indexes\base.py:5009) (10 samples, 1.09%)</title><rect x="76.1488%" y="196" width="1.0941%" height="15" fill="rgb(233,223,10)"/><text x="76.3988%" y="206.50"></text></g><g><title>is_unique (pandas\core\indexes\base.py:1769) (10 samples, 1.09%)</title><rect x="76.1488%" y="212" width="1.0941%" height="15" fill="rgb(215,21,27)"/><text x="76.3988%" y="222.50"></text></g><g><title>__setitem__ (pandas\core\indexing.py:688) (11 samples, 1.20%)</title><rect x="76.1488%" y="132" width="1.2035%" height="15" fill="rgb(232,23,21)"/><text x="76.3988%" y="142.50"></text></g><g><title>_get_setitem_indexer (pandas\core\indexing.py:636) (11 samples, 1.20%)</title><rect x="76.1488%" y="148" width="1.2035%" height="15" fill="rgb(244,5,23)"/><text x="76.3988%" y="158.50"></text></g><g><title>_convert_to_indexer (pandas\core\indexing.py:1212) (11 samples, 1.20%)</title><rect x="76.1488%" y="164" width="1.2035%" height="15" fill="rgb(226,81,46)"/><text x="76.3988%" y="174.50"></text></g><g><title>_align_series (pandas\core\indexing.py:2007) (18 samples, 1.97%)</title><rect x="78.5558%" y="196" width="1.9694%" height="15" fill="rgb(247,70,30)"/><text x="78.8058%" y="206.50">_..</text></g><g><title>_align_series (pandas\core\indexing.py:2008) (12 samples, 1.31%)</title><rect x="80.5252%" y="196" width="1.3129%" height="15" fill="rgb(212,68,19)"/><text x="80.7752%" y="206.50"></text></g><g><title>equals (pandas\core\indexes\base.py:4470) (11 samples, 1.20%)</title><rect x="80.6346%" y="212" width="1.2035%" height="15" fill="rgb(240,187,13)"/><text x="80.8846%" y="222.50"></text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1781) (41 samples, 4.49%)</title><rect x="77.4617%" y="180" width="4.4858%" height="15" fill="rgb(223,113,26)"/><text x="77.7117%" y="190.50">_seti..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1782) (15 samples, 1.64%)</title><rect x="81.9475%" y="180" width="1.6411%" height="15" fill="rgb(206,192,2)"/><text x="82.1975%" y="190.50"></text></g><g><title>__getitem__ (pandas\core\frame.py:2996) (12 samples, 1.31%)</title><rect x="82.2757%" y="196" width="1.3129%" height="15" fill="rgb(241,108,4)"/><text x="82.5257%" y="206.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1801) (11 samples, 1.20%)</title><rect x="83.5886%" y="196" width="1.2035%" height="15" fill="rgb(247,173,49)"/><text x="83.8386%" y="206.50"></text></g><g><title>copy (pandas\core\generic.py:5992) (13 samples, 1.42%)</title><rect x="85.3392%" y="212" width="1.4223%" height="15" fill="rgb(224,114,35)"/><text x="85.5892%" y="222.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1812) (23 samples, 2.52%)</title><rect x="85.0109%" y="196" width="2.5164%" height="15" fill="rgb(245,159,27)"/><text x="85.2609%" y="206.50">_s..</text></g><g><title>apply (pandas\core\internals\managers.py:427) (11 samples, 1.20%)</title><rect x="87.7462%" y="228" width="1.2035%" height="15" fill="rgb(245,172,44)"/><text x="87.9962%" y="238.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1813) (14 samples, 1.53%)</title><rect x="87.5274%" y="196" width="1.5317%" height="15" fill="rgb(236,23,11)"/><text x="87.7774%" y="206.50"></text></g><g><title>setitem (pandas\core\internals\managers.py:568) (13 samples, 1.42%)</title><rect x="87.6368%" y="212" width="1.4223%" height="15" fill="rgb(205,117,38)"/><text x="87.8868%" y="222.50"></text></g><g><title>_iset_item (pandas\core\generic.py:3820) (10 samples, 1.09%)</title><rect x="90.2626%" y="228" width="1.0941%" height="15" fill="rgb(237,72,25)"/><text x="90.5126%" y="238.50"></text></g><g><title>update_network_data (nhd_network_augment.py:781) (140 samples, 15.32%)</title><rect x="76.1488%" y="116" width="15.3173%" height="15" fill="rgb(244,70,9)"/><text x="76.3988%" y="126.50">update_network_data (nh..</text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (129 samples, 14.11%)</title><rect x="77.3523%" y="132" width="14.1138%" height="15" fill="rgb(217,125,39)"/><text x="77.6023%" y="142.50">__setitem__ (pandas\c..</text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (129 samples, 14.11%)</title><rect x="77.3523%" y="148" width="14.1138%" height="15" fill="rgb(235,36,10)"/><text x="77.6023%" y="158.50">_setitem_with_indexer..</text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (129 samples, 14.11%)</title><rect x="77.3523%" y="164" width="14.1138%" height="15" fill="rgb(251,123,47)"/><text x="77.6023%" y="174.50">_setitem_with_indexer..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1787) (72 samples, 7.88%)</title><rect x="83.5886%" y="180" width="7.8775%" height="15" fill="rgb(221,13,13)"/><text x="83.8386%" y="190.50">_setitem_wi..</text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1817) (20 samples, 2.19%)</title><rect x="89.2779%" y="196" width="2.1882%" height="15" fill="rgb(238,131,9)"/><text x="89.5279%" y="206.50">_..</text></g><g><title>_iset_item (pandas\core\frame.py:3220) (11 samples, 1.20%)</title><rect x="90.2626%" y="212" width="1.2035%" height="15" fill="rgb(211,50,8)"/><text x="90.5126%" y="222.50"></text></g><g><title>main (nhd_network_augment.py:1198) (830 samples, 90.81%)</title><rect x="1.2035%" y="84" width="90.8096%" height="15" fill="rgb(245,182,24)"/><text x="1.4535%" y="94.50">main (nhd_network_augment.py:1198)</text></g><g><title>segment_merge (nhd_network_augment.py:958) (166 samples, 18.16%)</title><rect x="73.8512%" y="100" width="18.1619%" height="15" fill="rgb(242,14,37)"/><text x="74.1012%" y="110.50">segment_merge (nhd_network_a..</text></g><g><title>main (nhd_network_augment.py:1249) (42 samples, 4.60%)</title><rect x="92.6696%" y="84" width="4.5952%" height="15" fill="rgb(246,228,12)"/><text x="92.9196%" y="94.50">main ..</text></g><g><title>to_file (geopandas\geodataframe.py:504) (42 samples, 4.60%)</title><rect x="92.6696%" y="100" width="4.5952%" height="15" fill="rgb(213,55,15)"/><text x="92.9196%" y="110.50">to_fi..</text></g><g><title>to_file (geopandas\io\file.py:130) (41 samples, 4.49%)</title><rect x="92.7790%" y="116" width="4.4858%" height="15" fill="rgb(209,9,3)"/><text x="93.0290%" y="126.50">to_fi..</text></g><g><title>writerecords (fiona\collection.py:349) (41 samples, 4.49%)</title><rect x="92.7790%" y="132" width="4.4858%" height="15" fill="rgb(230,59,30)"/><text x="93.0290%" y="142.50">write..</text></g><g><title>&lt;module&gt; (nhd_network_augment.py:1376) (891 samples, 97.48%)</title><rect x="0.1094%" y="68" width="97.4836%" height="15" fill="rgb(209,121,21)"/><text x="0.3594%" y="78.50">&lt;module&gt; (nhd_network_augment.py:1376)</text></g><g><title>all (914 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="62.50"></text></g></svg></svg>