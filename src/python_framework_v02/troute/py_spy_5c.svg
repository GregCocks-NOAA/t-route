<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="346" onload="init(evt)" viewBox="0 0 1200 346" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="346" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="335.00"> </text><svg id="frames" x="10" width="1180"><g><title>main (nhd_network_augment.py:1096) (1,268 samples, 1.12%)</title><rect x="0.4042%" y="84" width="1.1215%" height="15" fill="rgb(227,0,7)"/><text x="0.6542%" y="94.50"></text></g><g><title>__getattr__ (pandas\core\generic.py:5461) (1,345 samples, 1.19%)</title><rect x="1.9980%" y="116" width="1.1896%" height="15" fill="rgb(217,0,24)"/><text x="2.2480%" y="126.50"></text></g><g><title>__getitem__ (pandas\core\frame.py:2996) (1,268 samples, 1.12%)</title><rect x="2.0661%" y="132" width="1.1215%" height="15" fill="rgb(221,193,54)"/><text x="2.3161%" y="142.50"></text></g><g><title>_get_listlike_indexer (pandas\core\indexing.py:1262) (1,408 samples, 1.25%)</title><rect x="4.5648%" y="164" width="1.2453%" height="15" fill="rgb(248,212,6)"/><text x="4.8148%" y="174.50"></text></g><g><title>_getitem_iterable (pandas\core\indexing.py:1053) (2,846 samples, 2.52%)</title><rect x="3.4627%" y="148" width="2.5172%" height="15" fill="rgb(208,68,35)"/><text x="3.7127%" y="158.50">_g..</text></g><g><title>take_nd (pandas\core\internals\blocks.py:1385) (2,179 samples, 1.93%)</title><rect x="6.1648%" y="212" width="1.9273%" height="15" fill="rgb(232,128,0)"/><text x="6.4148%" y="222.50">t..</text></g><g><title>&lt;listcomp&gt; (pandas\core\internals\managers.py:1312) (2,558 samples, 2.26%)</title><rect x="6.1241%" y="196" width="2.2625%" height="15" fill="rgb(207,160,47)"/><text x="6.3741%" y="206.50">&lt;..</text></g><g><title>reindex_indexer (pandas\core\internals\managers.py:1311) (2,597 samples, 2.30%)</title><rect x="6.1135%" y="180" width="2.2970%" height="15" fill="rgb(228,23,34)"/><text x="6.3635%" y="190.50">r..</text></g><g><title>_reindex_with_indexers (pandas\core\generic.py:4874) (2,739 samples, 2.42%)</title><rect x="6.0666%" y="164" width="2.4226%" height="15" fill="rgb(218,30,26)"/><text x="6.3166%" y="174.50">_r..</text></g><g><title>_getitem_iterable (pandas\core\indexing.py:1054) (3,009 samples, 2.66%)</title><rect x="5.9800%" y="148" width="2.6614%" height="15" fill="rgb(220,122,19)"/><text x="6.2300%" y="158.50">_g..</text></g><g><title>__getitem__ (pandas\core\indexing.py:895) (6,150 samples, 5.44%)</title><rect x="3.2036%" y="116" width="5.4395%" height="15" fill="rgb(250,228,42)"/><text x="3.4536%" y="126.50">__getit..</text></g><g><title>_getitem_axis (pandas\core\indexing.py:1113) (5,902 samples, 5.22%)</title><rect x="3.4229%" y="132" width="5.2202%" height="15" fill="rgb(240,193,28)"/><text x="3.6729%" y="142.50">_getit..</text></g><g><title>_min_count_stat_function (pandas\core\generic.py:10768) (1,257 samples, 1.11%)</title><rect x="8.6962%" y="148" width="1.1118%" height="15" fill="rgb(216,20,37)"/><text x="8.9462%" y="158.50"></text></g><g><title>sum (pandas\core\generic.py:10786) (1,284 samples, 1.14%)</title><rect x="8.6732%" y="132" width="1.1357%" height="15" fill="rgb(206,188,39)"/><text x="8.9232%" y="142.50"></text></g><g><title>segment_merge (nhd_network_augment.py:875) (9,064 samples, 8.02%)</title><rect x="1.7946%" y="100" width="8.0169%" height="15" fill="rgb(217,207,13)"/><text x="2.0446%" y="110.50">segment_mer..</text></g><g><title>sum (pandas\core\generic.py:11066) (1,308 samples, 1.16%)</title><rect x="8.6546%" y="116" width="1.1569%" height="15" fill="rgb(231,73,38)"/><text x="8.9046%" y="126.50"></text></g><g><title>merge_all (nhd_network_augment.py:733) (2,523 samples, 2.23%)</title><rect x="10.8437%" y="116" width="2.2315%" height="15" fill="rgb(225,20,46)"/><text x="11.0937%" y="126.50">m..</text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (1,707 samples, 1.51%)</title><rect x="13.1150%" y="164" width="1.5098%" height="15" fill="rgb(210,31,41)"/><text x="13.3650%" y="174.50"></text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (1,717 samples, 1.52%)</title><rect x="13.1071%" y="132" width="1.5186%" height="15" fill="rgb(221,200,47)"/><text x="13.3571%" y="142.50"></text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (1,717 samples, 1.52%)</title><rect x="13.1071%" y="148" width="1.5186%" height="15" fill="rgb(226,26,5)"/><text x="13.3571%" y="158.50"></text></g><g><title>merge_all (nhd_network_augment.py:736) (1,775 samples, 1.57%)</title><rect x="13.0752%" y="116" width="1.5699%" height="15" fill="rgb(249,33,26)"/><text x="13.3252%" y="126.50"></text></g><g><title>segment_merge (nhd_network_augment.py:892) (4,690 samples, 4.15%)</title><rect x="10.7084%" y="100" width="4.1482%" height="15" fill="rgb(235,183,28)"/><text x="10.9584%" y="110.50">segme..</text></g><g><title>update_network_data (nhd_network_augment.py:781) (1,927 samples, 1.70%)</title><rect x="15.1095%" y="116" width="1.7044%" height="15" fill="rgb(221,5,38)"/><text x="15.3595%" y="126.50"></text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (1,804 samples, 1.60%)</title><rect x="15.2183%" y="132" width="1.5956%" height="15" fill="rgb(247,18,42)"/><text x="15.4683%" y="142.50"></text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (1,802 samples, 1.59%)</title><rect x="15.2201%" y="148" width="1.5938%" height="15" fill="rgb(241,131,45)"/><text x="15.4701%" y="158.50"></text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (1,797 samples, 1.59%)</title><rect x="15.2245%" y="164" width="1.5894%" height="15" fill="rgb(249,31,29)"/><text x="15.4745%" y="174.50"></text></g><g><title>segment_merge (nhd_network_augment.py:895) (2,276 samples, 2.01%)</title><rect x="14.8566%" y="100" width="2.0131%" height="15" fill="rgb(225,111,53)"/><text x="15.1066%" y="110.50">s..</text></g><g><title>__getattr__ (pandas\core\generic.py:5461) (1,134 samples, 1.00%)</title><rect x="17.0501%" y="116" width="1.0030%" height="15" fill="rgb(238,160,17)"/><text x="17.3001%" y="126.50"></text></g><g><title>_get_listlike_indexer (pandas\core\indexing.py:1262) (1,237 samples, 1.09%)</title><rect x="19.2029%" y="164" width="1.0941%" height="15" fill="rgb(214,148,48)"/><text x="19.4529%" y="174.50"></text></g><g><title>_getitem_iterable (pandas\core\indexing.py:1053) (2,444 samples, 2.16%)</title><rect x="18.2645%" y="148" width="2.1617%" height="15" fill="rgb(232,36,49)"/><text x="18.5145%" y="158.50">_..</text></g><g><title>take_nd (pandas\core\internals\blocks.py:1385) (1,787 samples, 1.58%)</title><rect x="20.5853%" y="212" width="1.5806%" height="15" fill="rgb(209,103,24)"/><text x="20.8353%" y="222.50"></text></g><g><title>&lt;listcomp&gt; (pandas\core\internals\managers.py:1312) (2,169 samples, 1.92%)</title><rect x="20.5526%" y="196" width="1.9184%" height="15" fill="rgb(229,88,8)"/><text x="20.8026%" y="206.50">&lt;..</text></g><g><title>reindex_indexer (pandas\core\internals\managers.py:1311) (2,205 samples, 1.95%)</title><rect x="20.5429%" y="180" width="1.9503%" height="15" fill="rgb(213,181,19)"/><text x="20.7929%" y="190.50">r..</text></g><g><title>_reindex_with_indexers (pandas\core\generic.py:4874) (2,339 samples, 2.07%)</title><rect x="20.5013%" y="164" width="2.0688%" height="15" fill="rgb(254,191,54)"/><text x="20.7513%" y="174.50">_..</text></g><g><title>_getitem_iterable (pandas\core\indexing.py:1054) (2,575 samples, 2.28%)</title><rect x="20.4261%" y="148" width="2.2775%" height="15" fill="rgb(241,83,37)"/><text x="20.6761%" y="158.50">_..</text></g><g><title>__getitem__ (pandas\core\indexing.py:895) (5,249 samples, 4.64%)</title><rect x="18.0646%" y="116" width="4.6426%" height="15" fill="rgb(233,36,39)"/><text x="18.3146%" y="126.50">__get..</text></g><g><title>_getitem_axis (pandas\core\indexing.py:1113) (5,061 samples, 4.48%)</title><rect x="18.2309%" y="132" width="4.4763%" height="15" fill="rgb(226,3,54)"/><text x="18.4809%" y="142.50">_geti..</text></g><g><title>segment_merge (nhd_network_augment.py:906) (7,119 samples, 6.30%)</title><rect x="16.8697%" y="100" width="6.2966%" height="15" fill="rgb(245,192,40)"/><text x="17.1197%" y="110.50">segment_..</text></g><g><title>segment_merge (nhd_network_augment.py:909) (1,137 samples, 1.01%)</title><rect x="23.1663%" y="100" width="1.0057%" height="15" fill="rgb(238,167,29)"/><text x="23.4163%" y="110.50"></text></g><g><title>upstream_merge (nhd_network_augment.py:626) (9,845 samples, 8.71%)</title><rect x="25.4862%" y="116" width="8.7077%" height="15" fill="rgb(232,182,51)"/><text x="25.7362%" y="126.50">upstream_mer..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1781) (2,331 samples, 2.06%)</title><rect x="34.4566%" y="180" width="2.0617%" height="15" fill="rgb(231,60,39)"/><text x="34.7066%" y="190.50">_..</text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (6,594 samples, 5.83%)</title><rect x="34.3248%" y="132" width="5.8322%" height="15" fill="rgb(208,69,12)"/><text x="34.5748%" y="142.50">__setit..</text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (6,587 samples, 5.83%)</title><rect x="34.3310%" y="148" width="5.8261%" height="15" fill="rgb(235,93,37)"/><text x="34.5810%" y="158.50">_setite..</text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (6,563 samples, 5.80%)</title><rect x="34.3523%" y="164" width="5.8048%" height="15" fill="rgb(213,116,39)"/><text x="34.6023%" y="174.50">_setite..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1787) (3,396 samples, 3.00%)</title><rect x="37.1534%" y="180" width="3.0037%" height="15" fill="rgb(222,207,29)"/><text x="37.4034%" y="190.50">_se..</text></g><g><title>upstream_merge (nhd_network_augment.py:629) (6,808 samples, 6.02%)</title><rect x="34.1939%" y="116" width="6.0215%" height="15" fill="rgb(206,96,30)"/><text x="34.4439%" y="126.50">upstream..</text></g><g><title>segment_merge (nhd_network_augment.py:931) (17,477 samples, 15.46%)</title><rect x="25.4013%" y="100" width="15.4580%" height="15" fill="rgb(218,138,4)"/><text x="25.6513%" y="110.50">segment_merge (nhd_netwo..</text></g><g><title>downstream_merge (nhd_network_augment.py:672) (1,544 samples, 1.37%)</title><rect x="41.5829%" y="116" width="1.3656%" height="15" fill="rgb(250,191,14)"/><text x="41.8329%" y="126.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:541) (1,626 samples, 1.44%)</title><rect x="44.6219%" y="132" width="1.4382%" height="15" fill="rgb(239,60,40)"/><text x="44.8719%" y="142.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:542) (1,966 samples, 1.74%)</title><rect x="46.0601%" y="132" width="1.7389%" height="15" fill="rgb(206,27,48)"/><text x="46.3101%" y="142.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:543) (1,991 samples, 1.76%)</title><rect x="47.7990%" y="132" width="1.7610%" height="15" fill="rgb(225,35,8)"/><text x="48.0490%" y="142.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:544) (2,077 samples, 1.84%)</title><rect x="49.5600%" y="132" width="1.8371%" height="15" fill="rgb(250,213,24)"/><text x="49.8100%" y="142.50">m..</text></g><g><title>merge_parameters (nhd_network_augment.py:545) (1,958 samples, 1.73%)</title><rect x="51.3970%" y="132" width="1.7318%" height="15" fill="rgb(247,123,22)"/><text x="51.6470%" y="142.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:546) (2,023 samples, 1.79%)</title><rect x="53.1288%" y="132" width="1.7893%" height="15" fill="rgb(231,138,38)"/><text x="53.3788%" y="142.50">m..</text></g><g><title>merge_parameters (nhd_network_augment.py:547) (2,049 samples, 1.81%)</title><rect x="54.9181%" y="132" width="1.8123%" height="15" fill="rgb(231,145,46)"/><text x="55.1681%" y="142.50">m..</text></g><g><title>merge_parameters (nhd_network_augment.py:550) (1,996 samples, 1.77%)</title><rect x="56.7304%" y="132" width="1.7654%" height="15" fill="rgb(251,118,11)"/><text x="56.9804%" y="142.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:551) (2,063 samples, 1.82%)</title><rect x="58.4959%" y="132" width="1.8247%" height="15" fill="rgb(217,147,25)"/><text x="58.7459%" y="142.50">m..</text></g><g><title>merge_parameters (nhd_network_augment.py:552) (1,926 samples, 1.70%)</title><rect x="60.3205%" y="132" width="1.7035%" height="15" fill="rgb(247,81,37)"/><text x="60.5705%" y="142.50"></text></g><g><title>downstream_merge (nhd_network_augment.py:681) (19,989 samples, 17.68%)</title><rect x="44.3477%" y="116" width="17.6798%" height="15" fill="rgb(209,12,38)"/><text x="44.5977%" y="126.50">downstream_merge (nhd_netwo..</text></g><g><title>_align_series (pandas\core\indexing.py:2007) (1,545 samples, 1.37%)</title><rect x="63.5294%" y="196" width="1.3665%" height="15" fill="rgb(227,1,9)"/><text x="63.7794%" y="206.50"></text></g><g><title>_align_series (pandas\core\indexing.py:2008) (1,763 samples, 1.56%)</title><rect x="64.8959%" y="196" width="1.5593%" height="15" fill="rgb(248,47,43)"/><text x="65.1459%" y="206.50"></text></g><g><title>equals (pandas\core\indexes\base.py:4470) (1,517 samples, 1.34%)</title><rect x="65.1135%" y="212" width="1.3418%" height="15" fill="rgb(221,10,30)"/><text x="65.3635%" y="222.50"></text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1781) (4,579 samples, 4.05%)</title><rect x="62.5238%" y="180" width="4.0500%" height="15" fill="rgb(210,229,1)"/><text x="62.7738%" y="190.50">_set..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1782) (1,480 samples, 1.31%)</title><rect x="66.5738%" y="180" width="1.3090%" height="15" fill="rgb(222,148,37)"/><text x="66.8238%" y="190.50"></text></g><g><title>__getitem__ (pandas\core\frame.py:2996) (1,319 samples, 1.17%)</title><rect x="66.7162%" y="196" width="1.1666%" height="15" fill="rgb(234,67,33)"/><text x="66.9662%" y="206.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1812) (1,511 samples, 1.34%)</title><rect x="68.9955%" y="196" width="1.3364%" height="15" fill="rgb(247,98,35)"/><text x="69.2455%" y="206.50"></text></g><g><title>apply (pandas\core\internals\managers.py:427) (1,520 samples, 1.34%)</title><rect x="70.4664%" y="228" width="1.3444%" height="15" fill="rgb(247,138,52)"/><text x="70.7164%" y="238.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1813) (1,813 samples, 1.60%)</title><rect x="70.3319%" y="196" width="1.6036%" height="15" fill="rgb(213,79,30)"/><text x="70.5819%" y="206.50"></text></g><g><title>setitem (pandas\core\internals\managers.py:568) (1,731 samples, 1.53%)</title><rect x="70.4045%" y="212" width="1.5310%" height="15" fill="rgb(246,177,23)"/><text x="70.6545%" y="222.50"></text></g><g><title>_iset_item (pandas\core\generic.py:3820) (1,205 samples, 1.07%)</title><rect x="72.5865%" y="228" width="1.0658%" height="15" fill="rgb(230,62,27)"/><text x="72.8365%" y="238.50"></text></g><g><title>_iset_item (pandas\core\frame.py:3220) (1,259 samples, 1.11%)</title><rect x="72.5688%" y="212" width="1.1136%" height="15" fill="rgb(216,154,8)"/><text x="72.8188%" y="222.50"></text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (12,999 samples, 11.50%)</title><rect x="62.2611%" y="132" width="11.4973%" height="15" fill="rgb(244,35,45)"/><text x="62.5111%" y="142.50">__setitem__ (pand..</text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (12,991 samples, 11.49%)</title><rect x="62.2682%" y="148" width="11.4903%" height="15" fill="rgb(251,115,12)"/><text x="62.5182%" y="158.50">_setitem_with_ind..</text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (12,930 samples, 11.44%)</title><rect x="62.3221%" y="164" width="11.4363%" height="15" fill="rgb(240,54,50)"/><text x="62.5721%" y="174.50">_setitem_with_ind..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1787) (6,643 samples, 5.88%)</title><rect x="67.8828%" y="180" width="5.8756%" height="15" fill="rgb(233,84,52)"/><text x="68.1328%" y="190.50">_setite..</text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1817) (1,922 samples, 1.70%)</title><rect x="72.0584%" y="196" width="1.7000%" height="15" fill="rgb(207,117,47)"/><text x="72.3084%" y="206.50"></text></g><g><title>downstream_merge (nhd_network_augment.py:684) (13,441 samples, 11.89%)</title><rect x="62.0276%" y="116" width="11.8883%" height="15" fill="rgb(249,43,39)"/><text x="62.2776%" y="126.50">downstream_merge (..</text></g><g><title>downstream_merge (nhd_network_augment.py:687) (1,285 samples, 1.14%)</title><rect x="73.9159%" y="116" width="1.1366%" height="15" fill="rgb(209,38,44)"/><text x="74.1659%" y="126.50"></text></g><g><title>segment_merge (nhd_network_augment.py:945) (38,068 samples, 33.67%)</title><rect x="41.5386%" y="100" width="33.6703%" height="15" fill="rgb(236,212,23)"/><text x="41.7886%" y="110.50">segment_merge (nhd_network_augment.py:945)</text></g><g><title>take_nd (pandas\core\internals\blocks.py:1385) (1,230 samples, 1.09%)</title><rect x="76.5472%" y="308" width="1.0879%" height="15" fill="rgb(242,79,21)"/><text x="76.7972%" y="318.50"></text></g><g><title>&lt;listcomp&gt; (pandas\core\internals\managers.py:1312) (1,292 samples, 1.14%)</title><rect x="76.5436%" y="292" width="1.1427%" height="15" fill="rgb(211,96,35)"/><text x="76.7936%" y="302.50"></text></g><g><title>reindex_indexer (pandas\core\internals\managers.py:1311) (1,297 samples, 1.15%)</title><rect x="76.5410%" y="276" width="1.1472%" height="15" fill="rgb(253,215,40)"/><text x="76.7910%" y="286.50"></text></g><g><title>_reindex_with_indexers (pandas\core\generic.py:4874) (1,323 samples, 1.17%)</title><rect x="76.5304%" y="260" width="1.1702%" height="15" fill="rgb(211,81,21)"/><text x="76.7804%" y="270.50"></text></g><g><title>_reindex_axes (pandas\core\frame.py:4019) (1,918 samples, 1.70%)</title><rect x="76.0280%" y="228" width="1.6964%" height="15" fill="rgb(208,190,38)"/><text x="76.2780%" y="238.50"></text></g><g><title>_reindex_index (pandas\core\frame.py:4038) (1,365 samples, 1.21%)</title><rect x="76.5171%" y="244" width="1.2073%" height="15" fill="rgb(235,213,38)"/><text x="76.7671%" y="254.50"></text></g><g><title>reindex (pandas\core\generic.py:4808) (1,934 samples, 1.71%)</title><rect x="76.0156%" y="212" width="1.7106%" height="15" fill="rgb(237,122,38)"/><text x="76.2656%" y="222.50"></text></g><g><title>_drop_axis (pandas\core\generic.py:4188) (2,054 samples, 1.82%)</title><rect x="75.9112%" y="164" width="1.8167%" height="15" fill="rgb(244,218,35)"/><text x="76.1612%" y="174.50">_..</text></g><g><title>wrapper (pandas\util\_decorators.py:312) (2,052 samples, 1.81%)</title><rect x="75.9130%" y="180" width="1.8149%" height="15" fill="rgb(240,68,47)"/><text x="76.1630%" y="190.50">w..</text></g><g><title>reindex (pandas\core\frame.py:4173) (2,037 samples, 1.80%)</title><rect x="75.9263%" y="196" width="1.8017%" height="15" fill="rgb(210,16,53)"/><text x="76.1763%" y="206.50">r..</text></g><g><title>drop (pandas\core\generic.py:4152) (2,448 samples, 2.17%)</title><rect x="75.5636%" y="148" width="2.1652%" height="15" fill="rgb(235,124,12)"/><text x="75.8136%" y="158.50">d..</text></g><g><title>update_network_data (nhd_network_augment.py:778) (2,467 samples, 2.18%)</title><rect x="75.5477%" y="116" width="2.1820%" height="15" fill="rgb(224,169,11)"/><text x="75.7977%" y="126.50">u..</text></g><g><title>drop (pandas\core\frame.py:4305) (2,467 samples, 2.18%)</title><rect x="75.5477%" y="132" width="2.1820%" height="15" fill="rgb(250,166,2)"/><text x="75.7977%" y="142.50">d..</text></g><g><title>_align_series (pandas\core\indexing.py:2007) (1,701 samples, 1.50%)</title><rect x="80.2814%" y="196" width="1.5045%" height="15" fill="rgb(242,216,29)"/><text x="80.5314%" y="206.50"></text></g><g><title>_align_series (pandas\core\indexing.py:2008) (1,978 samples, 1.75%)</title><rect x="81.7859%" y="196" width="1.7495%" height="15" fill="rgb(230,116,27)"/><text x="82.0359%" y="206.50"></text></g><g><title>equals (pandas\core\indexes\base.py:4470) (1,701 samples, 1.50%)</title><rect x="82.0309%" y="212" width="1.5045%" height="15" fill="rgb(228,99,48)"/><text x="82.2809%" y="222.50"></text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1781) (5,151 samples, 4.56%)</title><rect x="79.1122%" y="180" width="4.5559%" height="15" fill="rgb(253,11,6)"/><text x="79.3622%" y="190.50">_seti..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1782) (1,592 samples, 1.41%)</title><rect x="83.6681%" y="180" width="1.4081%" height="15" fill="rgb(247,143,39)"/><text x="83.9181%" y="190.50"></text></g><g><title>__getitem__ (pandas\core\frame.py:2996) (1,432 samples, 1.27%)</title><rect x="83.8096%" y="196" width="1.2666%" height="15" fill="rgb(236,97,10)"/><text x="84.0596%" y="206.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1801) (1,393 samples, 1.23%)</title><rect x="85.1275%" y="196" width="1.2321%" height="15" fill="rgb(233,208,19)"/><text x="85.3775%" y="206.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1812) (1,831 samples, 1.62%)</title><rect x="86.4754%" y="196" width="1.6195%" height="15" fill="rgb(216,164,2)"/><text x="86.7254%" y="206.50"></text></g><g><title>apply (pandas\core\internals\managers.py:427) (1,705 samples, 1.51%)</title><rect x="88.2515%" y="228" width="1.5080%" height="15" fill="rgb(220,129,5)"/><text x="88.5015%" y="238.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1813) (2,050 samples, 1.81%)</title><rect x="88.0949%" y="196" width="1.8132%" height="15" fill="rgb(242,17,10)"/><text x="88.3449%" y="206.50">_..</text></g><g><title>setitem (pandas\core\internals\managers.py:568) (1,962 samples, 1.74%)</title><rect x="88.1728%" y="212" width="1.7353%" height="15" fill="rgb(242,107,0)"/><text x="88.4228%" y="222.50"></text></g><g><title>_iset_item (pandas\core\generic.py:3820) (1,503 samples, 1.33%)</title><rect x="90.7218%" y="228" width="1.3294%" height="15" fill="rgb(251,28,31)"/><text x="90.9718%" y="238.50"></text></g><g><title>_iset_item (pandas\core\frame.py:3220) (1,552 samples, 1.37%)</title><rect x="90.7112%" y="212" width="1.3727%" height="15" fill="rgb(233,223,10)"/><text x="90.9612%" y="222.50"></text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (15,081 samples, 13.34%)</title><rect x="78.8318%" y="164" width="13.3388%" height="15" fill="rgb(215,21,27)"/><text x="79.0818%" y="174.50">_setitem_with_indexe..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1787) (8,021 samples, 7.09%)</title><rect x="85.0762%" y="180" width="7.0944%" height="15" fill="rgb(232,23,21)"/><text x="85.3262%" y="190.50">_setitem_w..</text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1817) (2,403 samples, 2.13%)</title><rect x="90.0452%" y="196" width="2.1254%" height="15" fill="rgb(244,5,23)"/><text x="90.2952%" y="206.50">_..</text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (15,166 samples, 13.41%)</title><rect x="78.7575%" y="148" width="13.4140%" height="15" fill="rgb(226,81,46)"/><text x="79.0075%" y="158.50">_setitem_with_indexe..</text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (15,184 samples, 13.43%)</title><rect x="78.7424%" y="132" width="13.4299%" height="15" fill="rgb(247,70,30)"/><text x="78.9924%" y="142.50">__setitem__ (pandas\..</text></g><g><title>update_network_data (nhd_network_augment.py:781) (16,330 samples, 14.44%)</title><rect x="77.7297%" y="116" width="14.4435%" height="15" fill="rgb(212,68,19)"/><text x="77.9797%" y="126.50">update_network_data (n..</text></g><g><title>segment_merge (nhd_network_augment.py:958) (19,338 samples, 17.10%)</title><rect x="75.5344%" y="100" width="17.1040%" height="15" fill="rgb(240,187,13)"/><text x="75.7844%" y="110.50">segment_merge (nhd_network..</text></g><g><title>main (nhd_network_augment.py:1198) (102,860 samples, 90.98%)</title><rect x="1.6947%" y="84" width="90.9774%" height="15" fill="rgb(223,113,26)"/><text x="1.9447%" y="94.50">main (nhd_network_augment.py:1198)</text></g><g><title>main (nhd_network_augment.py:1249) (3,824 samples, 3.38%)</title><rect x="93.4301%" y="84" width="3.3822%" height="15" fill="rgb(206,192,2)"/><text x="93.6801%" y="94.50">mai..</text></g><g><title>to_file (geopandas\geodataframe.py:504) (3,824 samples, 3.38%)</title><rect x="93.4301%" y="100" width="3.3822%" height="15" fill="rgb(241,108,4)"/><text x="93.6801%" y="110.50">to_..</text></g><g><title>to_file (geopandas\io\file.py:130) (3,674 samples, 3.25%)</title><rect x="93.5628%" y="116" width="3.2496%" height="15" fill="rgb(247,173,49)"/><text x="93.8128%" y="126.50">to_..</text></g><g><title>writerecords (fiona\collection.py:349) (3,674 samples, 3.25%)</title><rect x="93.5628%" y="132" width="3.2496%" height="15" fill="rgb(224,114,35)"/><text x="93.8128%" y="142.50">wri..</text></g><g><title>&lt;module&gt; (nhd_network_augment.py:1376) (109,584 samples, 96.92%)</title><rect x="0.2910%" y="68" width="96.9247%" height="15" fill="rgb(245,159,27)"/><text x="0.5410%" y="78.50">&lt;module&gt; (nhd_network_augment.py:1376)</text></g><g><title>&lt;module&gt; (xarray\__init__.py:3) (1,202 samples, 1.06%)</title><rect x="98.9324%" y="164" width="1.0631%" height="15" fill="rgb(245,172,44)"/><text x="99.1824%" y="174.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1042) (1,202 samples, 1.06%)</title><rect x="98.9324%" y="180" width="1.0631%" height="15" fill="rgb(236,23,11)"/><text x="99.1824%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1,202 samples, 1.06%)</title><rect x="98.9324%" y="196" width="1.0631%" height="15" fill="rgb(205,117,38)"/><text x="99.1824%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (1,202 samples, 1.06%)</title><rect x="98.9324%" y="212" width="1.0631%" height="15" fill="rgb(237,72,25)"/><text x="99.1824%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (1,198 samples, 1.06%)</title><rect x="98.9360%" y="228" width="1.0596%" height="15" fill="rgb(244,70,9)"/><text x="99.1860%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (1,197 samples, 1.06%)</title><rect x="98.9369%" y="244" width="1.0587%" height="15" fill="rgb(217,125,39)"/><text x="99.1869%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (1,194 samples, 1.06%)</title><rect x="98.9395%" y="260" width="1.0561%" height="15" fill="rgb(235,36,10)"/><text x="99.1895%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1,194 samples, 1.06%)</title><rect x="98.9395%" y="276" width="1.0561%" height="15" fill="rgb(251,123,47)"/><text x="99.1895%" y="286.50"></text></g><g><title>&lt;module&gt; (nhd_network_augment.py:4) (1,678 samples, 1.48%)</title><rect x="98.5141%" y="68" width="1.4842%" height="15" fill="rgb(221,13,13)"/><text x="98.7641%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (1,678 samples, 1.48%)</title><rect x="98.5141%" y="84" width="1.4842%" height="15" fill="rgb(238,131,9)"/><text x="98.7641%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (1,678 samples, 1.48%)</title><rect x="98.5141%" y="100" width="1.4842%" height="15" fill="rgb(211,50,8)"/><text x="98.7641%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (1,678 samples, 1.48%)</title><rect x="98.5141%" y="116" width="1.4842%" height="15" fill="rgb(245,182,24)"/><text x="98.7641%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:783) (1,678 samples, 1.48%)</title><rect x="98.5141%" y="132" width="1.4842%" height="15" fill="rgb(242,14,37)"/><text x="98.7641%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1,678 samples, 1.48%)</title><rect x="98.5141%" y="148" width="1.4842%" height="15" fill="rgb(246,228,12)"/><text x="98.7641%" y="158.50"></text></g><g><title>all (113,061 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="62.50"></text></g></svg></svg>