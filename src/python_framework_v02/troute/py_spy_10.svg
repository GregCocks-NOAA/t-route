<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="271.00"> </text><svg id="frames" x="10" width="1180"><g><title>main (nhd_network_augment.py:1096) (109 samples, 1.24%)</title><rect x="2.5085%" y="100" width="1.2372%" height="15" fill="rgb(227,0,7)"/><text x="2.7585%" y="110.50"></text></g><g><title>_get_listlike_indexer (pandas\core\indexing.py:1262) (122 samples, 1.38%)</title><rect x="5.8116%" y="180" width="1.3848%" height="15" fill="rgb(217,0,24)"/><text x="6.0616%" y="190.50"></text></g><g><title>_getitem_iterable (pandas\core\indexing.py:1053) (188 samples, 2.13%)</title><rect x="5.1078%" y="164" width="2.1339%" height="15" fill="rgb(221,193,54)"/><text x="5.3578%" y="174.50">_..</text></g><g><title>take_nd (pandas\core\internals\blocks.py:1385) (143 samples, 1.62%)</title><rect x="7.7753%" y="228" width="1.6232%" height="15" fill="rgb(248,212,6)"/><text x="8.0253%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (pandas\core\internals\managers.py:1312) (167 samples, 1.90%)</title><rect x="7.7072%" y="212" width="1.8956%" height="15" fill="rgb(208,68,35)"/><text x="7.9572%" y="222.50">&lt;..</text></g><g><title>reindex_indexer (pandas\core\internals\managers.py:1311) (170 samples, 1.93%)</title><rect x="7.7072%" y="196" width="1.9296%" height="15" fill="rgb(232,128,0)"/><text x="7.9572%" y="206.50">r..</text></g><g><title>_reindex_with_indexers (pandas\core\generic.py:4874) (177 samples, 2.01%)</title><rect x="7.6390%" y="180" width="2.0091%" height="15" fill="rgb(207,160,47)"/><text x="7.8890%" y="190.50">_..</text></g><g><title>_getitem_iterable (pandas\core\indexing.py:1054) (262 samples, 2.97%)</title><rect x="7.2418%" y="164" width="2.9739%" height="15" fill="rgb(228,23,34)"/><text x="7.4918%" y="174.50">_ge..</text></g><g><title>__getitem__ (pandas\core\indexing.py:895) (463 samples, 5.26%)</title><rect x="4.9943%" y="132" width="5.2554%" height="15" fill="rgb(218,30,26)"/><text x="5.2443%" y="142.50">__geti..</text></g><g><title>_getitem_axis (pandas\core\indexing.py:1113) (453 samples, 5.14%)</title><rect x="5.1078%" y="148" width="5.1419%" height="15" fill="rgb(220,122,19)"/><text x="5.3578%" y="158.50">_getit..</text></g><g><title>segment_merge (nhd_network_augment.py:875) (613 samples, 6.96%)</title><rect x="4.0295%" y="116" width="6.9580%" height="15" fill="rgb(250,228,42)"/><text x="4.2795%" y="126.50">segment_m..</text></g><g><title>merge_all (nhd_network_augment.py:733) (199 samples, 2.26%)</title><rect x="12.0545%" y="132" width="2.2588%" height="15" fill="rgb(240,193,28)"/><text x="12.3045%" y="142.50">m..</text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (127 samples, 1.44%)</title><rect x="14.3133%" y="148" width="1.4415%" height="15" fill="rgb(216,20,37)"/><text x="14.5633%" y="158.50"></text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (126 samples, 1.43%)</title><rect x="14.3246%" y="164" width="1.4302%" height="15" fill="rgb(206,188,39)"/><text x="14.5746%" y="174.50"></text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (125 samples, 1.42%)</title><rect x="14.3360%" y="180" width="1.4188%" height="15" fill="rgb(217,207,13)"/><text x="14.5860%" y="190.50"></text></g><g><title>merge_all (nhd_network_augment.py:736) (132 samples, 1.50%)</title><rect x="14.3133%" y="132" width="1.4983%" height="15" fill="rgb(231,73,38)"/><text x="14.5633%" y="142.50"></text></g><g><title>segment_merge (nhd_network_augment.py:892) (359 samples, 4.07%)</title><rect x="11.8729%" y="116" width="4.0749%" height="15" fill="rgb(225,20,46)"/><text x="12.1229%" y="126.50">segm..</text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (127 samples, 1.44%)</title><rect x="16.2883%" y="148" width="1.4415%" height="15" fill="rgb(210,31,41)"/><text x="16.5383%" y="158.50"></text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (126 samples, 1.43%)</title><rect x="16.2997%" y="164" width="1.4302%" height="15" fill="rgb(221,200,47)"/><text x="16.5497%" y="174.50"></text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (125 samples, 1.42%)</title><rect x="16.3110%" y="180" width="1.4188%" height="15" fill="rgb(226,26,5)"/><text x="16.5610%" y="190.50"></text></g><g><title>update_network_data (nhd_network_augment.py:781) (135 samples, 1.53%)</title><rect x="16.2202%" y="132" width="1.5323%" height="15" fill="rgb(249,33,26)"/><text x="16.4702%" y="142.50"></text></g><g><title>segment_merge (nhd_network_augment.py:895) (167 samples, 1.90%)</title><rect x="15.9478%" y="116" width="1.8956%" height="15" fill="rgb(235,183,28)"/><text x="16.1978%" y="126.50">s..</text></g><g><title>_get_listlike_indexer (pandas\core\indexing.py:1262) (114 samples, 1.29%)</title><rect x="19.0692%" y="180" width="1.2940%" height="15" fill="rgb(221,5,38)"/><text x="19.3192%" y="190.50"></text></g><g><title>_getitem_iterable (pandas\core\indexing.py:1053) (159 samples, 1.80%)</title><rect x="18.6379%" y="164" width="1.8048%" height="15" fill="rgb(247,18,42)"/><text x="18.8879%" y="174.50">_..</text></g><g><title>take_nd (pandas\core\internals\blocks.py:1385) (108 samples, 1.23%)</title><rect x="20.9194%" y="228" width="1.2259%" height="15" fill="rgb(241,131,45)"/><text x="21.1694%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (pandas\core\internals\managers.py:1312) (138 samples, 1.57%)</title><rect x="20.8513%" y="212" width="1.5664%" height="15" fill="rgb(249,31,29)"/><text x="21.1013%" y="222.50"></text></g><g><title>_reindex_with_indexers (pandas\core\generic.py:4874) (144 samples, 1.63%)</title><rect x="20.8059%" y="180" width="1.6345%" height="15" fill="rgb(225,111,53)"/><text x="21.0559%" y="190.50"></text></g><g><title>reindex_indexer (pandas\core\internals\managers.py:1311) (141 samples, 1.60%)</title><rect x="20.8400%" y="196" width="1.6005%" height="15" fill="rgb(238,160,17)"/><text x="21.0900%" y="206.50"></text></g><g><title>_getitem_iterable (pandas\core\indexing.py:1054) (223 samples, 2.53%)</title><rect x="20.4427%" y="164" width="2.5312%" height="15" fill="rgb(214,148,48)"/><text x="20.6927%" y="174.50">_g..</text></g><g><title>_getitem_axis (pandas\core\indexing.py:1113) (396 samples, 4.49%)</title><rect x="18.6039%" y="148" width="4.4949%" height="15" fill="rgb(232,36,49)"/><text x="18.8539%" y="158.50">_geti..</text></g><g><title>__getitem__ (pandas\core\indexing.py:895) (402 samples, 4.56%)</title><rect x="18.5471%" y="132" width="4.5630%" height="15" fill="rgb(209,103,24)"/><text x="18.7971%" y="142.50">__get..</text></g><g><title>segment_merge (nhd_network_augment.py:906) (523 samples, 5.94%)</title><rect x="17.8434%" y="116" width="5.9364%" height="15" fill="rgb(229,88,8)"/><text x="18.0934%" y="126.50">segment_..</text></g><g><title>segment_merge (nhd_network_augment.py:909) (94 samples, 1.07%)</title><rect x="23.7798%" y="116" width="1.0670%" height="15" fill="rgb(213,181,19)"/><text x="24.0298%" y="126.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:542) (90 samples, 1.02%)</title><rect x="26.5948%" y="148" width="1.0216%" height="15" fill="rgb(254,191,54)"/><text x="26.8448%" y="158.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:550) (89 samples, 1.01%)</title><rect x="31.6686%" y="148" width="1.0102%" height="15" fill="rgb(241,83,37)"/><text x="31.9186%" y="158.50"></text></g><g><title>upstream_merge (nhd_network_augment.py:626) (736 samples, 8.35%)</title><rect x="25.8683%" y="132" width="8.3541%" height="15" fill="rgb(233,36,39)"/><text x="26.1183%" y="142.50">upstream_mer..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1781) (150 samples, 1.70%)</title><rect x="34.5516%" y="196" width="1.7026%" height="15" fill="rgb(226,3,54)"/><text x="34.8016%" y="206.50"></text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (465 samples, 5.28%)</title><rect x="34.3360%" y="148" width="5.2781%" height="15" fill="rgb(245,192,40)"/><text x="34.5860%" y="158.50">__seti..</text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (457 samples, 5.19%)</title><rect x="34.4268%" y="164" width="5.1873%" height="15" fill="rgb(238,167,29)"/><text x="34.6768%" y="174.50">_setit..</text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (457 samples, 5.19%)</title><rect x="34.4268%" y="180" width="5.1873%" height="15" fill="rgb(232,182,51)"/><text x="34.6768%" y="190.50">_setit..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1787) (248 samples, 2.81%)</title><rect x="36.7991%" y="196" width="2.8150%" height="15" fill="rgb(231,60,39)"/><text x="37.0491%" y="206.50">_s..</text></g><g><title>upstream_merge (nhd_network_augment.py:629) (489 samples, 5.55%)</title><rect x="34.2225%" y="132" width="5.5505%" height="15" fill="rgb(208,69,12)"/><text x="34.4725%" y="142.50">upstrea..</text></g><g><title>segment_merge (nhd_network_augment.py:931) (1,285 samples, 14.59%)</title><rect x="25.8229%" y="116" width="14.5857%" height="15" fill="rgb(235,93,37)"/><text x="26.0729%" y="126.50">segment_merge (nhd_net..</text></g><g><title>downstream_merge (nhd_network_augment.py:672) (115 samples, 1.31%)</title><rect x="41.1124%" y="132" width="1.3053%" height="15" fill="rgb(213,116,39)"/><text x="41.3624%" y="142.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:541) (108 samples, 1.23%)</title><rect x="44.2338%" y="148" width="1.2259%" height="15" fill="rgb(222,207,29)"/><text x="44.4838%" y="158.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:542) (162 samples, 1.84%)</title><rect x="45.4597%" y="148" width="1.8388%" height="15" fill="rgb(206,96,30)"/><text x="45.7097%" y="158.50">m..</text></g><g><title>merge_parameters (nhd_network_augment.py:543) (151 samples, 1.71%)</title><rect x="47.2985%" y="148" width="1.7140%" height="15" fill="rgb(218,138,4)"/><text x="47.5485%" y="158.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:544) (146 samples, 1.66%)</title><rect x="49.0125%" y="148" width="1.6572%" height="15" fill="rgb(250,191,14)"/><text x="49.2625%" y="158.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:545) (146 samples, 1.66%)</title><rect x="50.6697%" y="148" width="1.6572%" height="15" fill="rgb(239,60,40)"/><text x="50.9197%" y="158.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:546) (132 samples, 1.50%)</title><rect x="52.3269%" y="148" width="1.4983%" height="15" fill="rgb(206,27,48)"/><text x="52.5769%" y="158.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:547) (163 samples, 1.85%)</title><rect x="53.8252%" y="148" width="1.8502%" height="15" fill="rgb(225,35,8)"/><text x="54.0752%" y="158.50">m..</text></g><g><title>merge_parameters (nhd_network_augment.py:550) (149 samples, 1.69%)</title><rect x="55.6754%" y="148" width="1.6913%" height="15" fill="rgb(250,213,24)"/><text x="55.9254%" y="158.50"></text></g><g><title>merge_parameters (nhd_network_augment.py:551) (163 samples, 1.85%)</title><rect x="57.3666%" y="148" width="1.8502%" height="15" fill="rgb(247,123,22)"/><text x="57.6166%" y="158.50">m..</text></g><g><title>downstream_merge (nhd_network_augment.py:681) (1,491 samples, 16.92%)</title><rect x="43.9160%" y="132" width="16.9240%" height="15" fill="rgb(231,138,38)"/><text x="44.1660%" y="142.50">downstream_merge (nhd_netw..</text></g><g><title>merge_parameters (nhd_network_augment.py:552) (143 samples, 1.62%)</title><rect x="59.2168%" y="148" width="1.6232%" height="15" fill="rgb(231,145,46)"/><text x="59.4668%" y="158.50"></text></g><g><title>_align_series (pandas\core\indexing.py:2007) (117 samples, 1.33%)</title><rect x="62.6447%" y="212" width="1.3280%" height="15" fill="rgb(251,118,11)"/><text x="62.8947%" y="222.50"></text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1781) (321 samples, 3.64%)</title><rect x="61.3167%" y="196" width="3.6436%" height="15" fill="rgb(217,147,25)"/><text x="61.5667%" y="206.50">_set..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1782) (103 samples, 1.17%)</title><rect x="64.9603%" y="196" width="1.1691%" height="15" fill="rgb(247,81,37)"/><text x="65.2103%" y="206.50"></text></g><g><title>_align_series (pandas\core\indexing.py:2009) (117 samples, 1.33%)</title><rect x="66.1748%" y="212" width="1.3280%" height="15" fill="rgb(209,12,38)"/><text x="66.4248%" y="222.50"></text></g><g><title>equals (pandas\core\indexes\base.py:4470) (101 samples, 1.15%)</title><rect x="66.3564%" y="228" width="1.1464%" height="15" fill="rgb(227,1,9)"/><text x="66.6064%" y="238.50"></text></g><g><title>array_equivalent (pandas\core\dtypes\missing.py:454) (98 samples, 1.11%)</title><rect x="66.3905%" y="244" width="1.1124%" height="15" fill="rgb(248,47,43)"/><text x="66.6405%" y="254.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1812) (89 samples, 1.01%)</title><rect x="68.0817%" y="212" width="1.0102%" height="15" fill="rgb(221,10,30)"/><text x="68.3317%" y="222.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1813) (131 samples, 1.49%)</title><rect x="69.0919%" y="212" width="1.4869%" height="15" fill="rgb(210,229,1)"/><text x="69.3419%" y="222.50"></text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1787) (564 samples, 6.40%)</title><rect x="66.1294%" y="196" width="6.4018%" height="15" fill="rgb(222,148,37)"/><text x="66.3794%" y="206.50">_setitem..</text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1817) (171 samples, 1.94%)</title><rect x="70.5902%" y="212" width="1.9410%" height="15" fill="rgb(234,67,33)"/><text x="70.8402%" y="222.50">_..</text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (1,019 samples, 11.57%)</title><rect x="60.9989%" y="180" width="11.5664%" height="15" fill="rgb(247,98,35)"/><text x="61.2489%" y="190.50">_setitem_with_ind..</text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (1,029 samples, 11.68%)</title><rect x="60.9081%" y="148" width="11.6799%" height="15" fill="rgb(247,138,52)"/><text x="61.1581%" y="158.50">__setitem__ (pand..</text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (1,023 samples, 11.61%)</title><rect x="60.9762%" y="164" width="11.6118%" height="15" fill="rgb(213,79,30)"/><text x="61.2262%" y="174.50">_setitem_with_ind..</text></g><g><title>downstream_merge (nhd_network_augment.py:684) (1,063 samples, 12.07%)</title><rect x="60.8400%" y="132" width="12.0658%" height="15" fill="rgb(246,177,23)"/><text x="61.0900%" y="142.50">downstream_merge (..</text></g><g><title>downstream_merge (nhd_network_augment.py:687) (98 samples, 1.11%)</title><rect x="72.9058%" y="132" width="1.1124%" height="15" fill="rgb(230,62,27)"/><text x="73.1558%" y="142.50"></text></g><g><title>segment_merge (nhd_network_augment.py:945) (2,926 samples, 33.21%)</title><rect x="41.0783%" y="116" width="33.2123%" height="15" fill="rgb(216,154,8)"/><text x="41.3283%" y="126.50">segment_merge (nhd_network_augment.py:945)</text></g><g><title>_drop_axis (pandas\core\generic.py:4188) (141 samples, 1.60%)</title><rect x="74.9262%" y="180" width="1.6005%" height="15" fill="rgb(244,35,45)"/><text x="75.1762%" y="190.50"></text></g><g><title>wrapper (pandas\util\_decorators.py:312) (130 samples, 1.48%)</title><rect x="75.0511%" y="196" width="1.4756%" height="15" fill="rgb(251,115,12)"/><text x="75.3011%" y="206.50"></text></g><g><title>reindex (pandas\core\frame.py:4173) (130 samples, 1.48%)</title><rect x="75.0511%" y="212" width="1.4756%" height="15" fill="rgb(240,54,50)"/><text x="75.3011%" y="222.50"></text></g><g><title>reindex (pandas\core\generic.py:4808) (129 samples, 1.46%)</title><rect x="75.0624%" y="228" width="1.4642%" height="15" fill="rgb(233,84,52)"/><text x="75.3124%" y="238.50"></text></g><g><title>_reindex_axes (pandas\core\frame.py:4019) (129 samples, 1.46%)</title><rect x="75.0624%" y="244" width="1.4642%" height="15" fill="rgb(207,117,47)"/><text x="75.3124%" y="254.50"></text></g><g><title>update_network_data (nhd_network_augment.py:778) (169 samples, 1.92%)</title><rect x="74.6425%" y="132" width="1.9183%" height="15" fill="rgb(249,43,39)"/><text x="74.8925%" y="142.50">u..</text></g><g><title>drop (pandas\core\frame.py:4305) (168 samples, 1.91%)</title><rect x="74.6538%" y="148" width="1.9069%" height="15" fill="rgb(209,38,44)"/><text x="74.9038%" y="158.50">d..</text></g><g><title>drop (pandas\core\generic.py:4152) (168 samples, 1.91%)</title><rect x="74.6538%" y="164" width="1.9069%" height="15" fill="rgb(236,212,23)"/><text x="74.9038%" y="174.50">d..</text></g><g><title>_align_series (pandas\core\indexing.py:2007) (129 samples, 1.46%)</title><rect x="79.2054%" y="212" width="1.4642%" height="15" fill="rgb(242,79,21)"/><text x="79.4554%" y="222.50"></text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1781) (340 samples, 3.86%)</title><rect x="77.8434%" y="196" width="3.8593%" height="15" fill="rgb(211,96,35)"/><text x="78.0934%" y="206.50">_set..</text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1782) (116 samples, 1.32%)</title><rect x="81.7026%" y="196" width="1.3167%" height="15" fill="rgb(253,215,40)"/><text x="81.9526%" y="206.50"></text></g><g><title>_align_series (pandas\core\indexing.py:2009) (138 samples, 1.57%)</title><rect x="83.0647%" y="212" width="1.5664%" height="15" fill="rgb(211,81,21)"/><text x="83.3147%" y="222.50"></text></g><g><title>equals (pandas\core\indexes\base.py:4470) (131 samples, 1.49%)</title><rect x="83.1442%" y="228" width="1.4869%" height="15" fill="rgb(208,190,38)"/><text x="83.3942%" y="238.50"></text></g><g><title>array_equivalent (pandas\core\dtypes\missing.py:454) (129 samples, 1.46%)</title><rect x="83.1669%" y="244" width="1.4642%" height="15" fill="rgb(235,213,38)"/><text x="83.4169%" y="254.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1812) (137 samples, 1.56%)</title><rect x="85.2327%" y="212" width="1.5551%" height="15" fill="rgb(237,122,38)"/><text x="85.4827%" y="222.50"></text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1813) (124 samples, 1.41%)</title><rect x="86.7877%" y="212" width="1.4075%" height="15" fill="rgb(244,218,35)"/><text x="87.0377%" y="222.50"></text></g><g><title>_setitem_with_indexer_frame_value (pandas\core\indexing.py:1787) (675 samples, 7.66%)</title><rect x="83.0193%" y="196" width="7.6617%" height="15" fill="rgb(240,68,47)"/><text x="83.2693%" y="206.50">_setitem_w..</text></g><g><title>_setitem_single_column (pandas\core\indexing.py:1817) (219 samples, 2.49%)</title><rect x="88.1952%" y="212" width="2.4858%" height="15" fill="rgb(210,16,53)"/><text x="88.4452%" y="222.50">_s..</text></g><g><title>setitem (pandas\core\internals\managers.py:568) (96 samples, 1.09%)</title><rect x="89.5914%" y="228" width="1.0897%" height="15" fill="rgb(235,124,12)"/><text x="89.8414%" y="238.50"></text></g><g><title>apply (pandas\core\internals\managers.py:440) (92 samples, 1.04%)</title><rect x="89.6368%" y="244" width="1.0443%" height="15" fill="rgb(224,169,11)"/><text x="89.8868%" y="254.50"></text></g><g><title>__setitem__ (pandas\core\indexing.py:692) (1,173 samples, 13.31%)</title><rect x="77.3780%" y="148" width="13.3144%" height="15" fill="rgb(250,166,2)"/><text x="77.6280%" y="158.50">__setitem__ (pandas\..</text></g><g><title>_setitem_with_indexer (pandas\core\indexing.py:1635) (1,167 samples, 13.25%)</title><rect x="77.4461%" y="164" width="13.2463%" height="15" fill="rgb(242,216,29)"/><text x="77.6961%" y="174.50">_setitem_with_indexe..</text></g><g><title>_setitem_with_indexer_split_path (pandas\core\indexing.py:1669) (1,165 samples, 13.22%)</title><rect x="77.4688%" y="180" width="13.2236%" height="15" fill="rgb(230,116,27)"/><text x="77.7188%" y="190.50">_setitem_with_indexe..</text></g><g><title>update_network_data (nhd_network_augment.py:781) (1,266 samples, 14.37%)</title><rect x="76.5607%" y="132" width="14.3700%" height="15" fill="rgb(228,99,48)"/><text x="76.8107%" y="142.50">update_network_data (n..</text></g><g><title>segment_merge (nhd_network_augment.py:958) (1,490 samples, 16.91%)</title><rect x="74.5403%" y="116" width="16.9126%" height="15" fill="rgb(253,11,6)"/><text x="74.7903%" y="126.50">segment_merge (nhd_network..</text></g><g><title>main (nhd_network_augment.py:1198) (7,717 samples, 87.59%)</title><rect x="3.9047%" y="100" width="87.5936%" height="15" fill="rgb(247,143,39)"/><text x="4.1547%" y="110.50">main (nhd_network_augment.py:1198)</text></g><g><title>main (nhd_network_augment.py:1249) (337 samples, 3.83%)</title><rect x="92.3723%" y="100" width="3.8252%" height="15" fill="rgb(236,97,10)"/><text x="92.6223%" y="110.50">main..</text></g><g><title>to_file (geopandas\geodataframe.py:504) (337 samples, 3.83%)</title><rect x="92.3723%" y="116" width="3.8252%" height="15" fill="rgb(233,208,19)"/><text x="92.6223%" y="126.50">to_f..</text></g><g><title>to_file (geopandas\io\file.py:130) (328 samples, 3.72%)</title><rect x="92.4745%" y="132" width="3.7230%" height="15" fill="rgb(216,164,2)"/><text x="92.7245%" y="142.50">to_f..</text></g><g><title>writerecords (fiona\collection.py:349) (328 samples, 3.72%)</title><rect x="92.4745%" y="148" width="3.7230%" height="15" fill="rgb(220,129,5)"/><text x="92.7245%" y="158.50">writ..</text></g><g><title>&lt;module&gt; (nhd_network_augment.py:1376) (8,301 samples, 94.22%)</title><rect x="2.4518%" y="84" width="94.2225%" height="15" fill="rgb(242,17,10)"/><text x="2.7018%" y="94.50">&lt;module&gt; (nhd_network_augment.py:1376)</text></g><g><title>__getattr__ (pandas\core\generic.py:5461) (89 samples, 1.01%)</title><rect x="98.5131%" y="100" width="1.0102%" height="15" fill="rgb(242,107,0)"/><text x="98.7631%" y="110.50"></text></g><g><title>asarray (numpy\core\_asarray.py:83) (105 samples, 1.19%)</title><rect x="98.5131%" y="84" width="1.1918%" height="15" fill="rgb(251,28,31)"/><text x="98.7631%" y="94.50"></text></g><g><title>all (8,810 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="62.50"></text></g><g><title>process 6072:&quot;&quot;python&quot; nhd_network_augment.py&quot; (8,810 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="78.50">process 6072:&quot;&quot;python&quot; nhd_network_augment.py&quot;</text></g></svg></svg>